################################################## 
# Gotw_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://gotw.nerc.ac.uk/
##############################

class ns0:
    targetNamespace = "http://gotw.nerc.ac.uk/"

    class ArrayOfString_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gotw.nerc.ac.uk/"
        type = (schema, "ArrayOfString")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfString_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"string"), aname="_string", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._string = []
                    return
            Holder.__name__ = "ArrayOfString_Holder"
            self.pyclass = Holder

    class Project_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gotw.nerc.ac.uk/"
        type = (schema, "Project")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Project_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ReferenceNumber"), aname="_ReferenceNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Abstract"), aname="_Abstract", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gotw.nerc.ac.uk/","Investigator",lazy=False)(pname=(ns,"LeadInvestigator"), aname="_LeadInvestigator", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gotw.nerc.ac.uk/","ArrayOfInvestigator",lazy=False)(pname=(ns,"CoInvestigators"), aname="_CoInvestigators", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Institution"), aname="_Institution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Department"), aname="_Department", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"State"), aname="_State", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"JesState"), aname="_JesState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Type"), aname="_Type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProgrammeType"), aname="_ProgrammeType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProgrammeName"), aname="_ProgrammeName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://gotw.nerc.ac.uk/","ArrayOfString",lazy=False)(pname=(ns,"ScienceAreas"), aname="_ScienceAreas", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OverallClassification"), aname="_OverallClassification", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PRC"), aname="_PRC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"StartDate"), aname="_StartDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"EndDate"), aname="_EndDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Value"), aname="_Value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReferenceNumber = None
                    self._Title = None
                    self._Abstract = None
                    self._LeadInvestigator = None
                    self._CoInvestigators = None
                    self._Institution = None
                    self._Department = None
                    self._State = None
                    self._JesState = None
                    self._Type = None
                    self._ProgrammeType = None
                    self._ProgrammeName = None
                    self._ScienceAreas = None
                    self._OverallClassification = None
                    self._PRC = None
                    self._StartDate = None
                    self._EndDate = None
                    self._Value = None
                    return
            Holder.__name__ = "Project_Holder"
            self.pyclass = Holder

    class Investigator_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gotw.nerc.ac.uk/"
        type = (schema, "Investigator")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Investigator_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Institution"), aname="_Institution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Department"), aname="_Department", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._Institution = None
                    self._Department = None
                    return
            Holder.__name__ = "Investigator_Holder"
            self.pyclass = Holder

    class ArrayOfInvestigator_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://gotw.nerc.ac.uk/"
        type = (schema, "ArrayOfInvestigator")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfInvestigator_Def.schema
            TClist = [GTD("http://gotw.nerc.ac.uk/","Investigator",lazy=False)(pname=(ns,"Investigator"), aname="_Investigator", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Investigator = []
                    return
            Holder.__name__ = "ArrayOfInvestigator_Holder"
            self.pyclass = Holder

    class GetGrantReferenceNumbers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetGrantReferenceNumbers"
        schema = "http://gotw.nerc.ac.uk/"
        def __init__(self, **kw):
            ns = ns0.GetGrantReferenceNumbers_Dec.schema
            TClist = []
            kw["pname"] = ("http://gotw.nerc.ac.uk/","GetGrantReferenceNumbers")
            kw["aname"] = "_GetGrantReferenceNumbers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "GetGrantReferenceNumbers_Holder"
            self.pyclass = Holder

    class GetGrantReferenceNumbersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetGrantReferenceNumbersResponse"
        schema = "http://gotw.nerc.ac.uk/"
        def __init__(self, **kw):
            ns = ns0.GetGrantReferenceNumbersResponse_Dec.schema
            TClist = [GTD("http://gotw.nerc.ac.uk/","ArrayOfString",lazy=False)(pname=(ns,"GetGrantReferenceNumbersResult"), aname="_GetGrantReferenceNumbersResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://gotw.nerc.ac.uk/","GetGrantReferenceNumbersResponse")
            kw["aname"] = "_GetGrantReferenceNumbersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetGrantReferenceNumbersResult = None
                    return
            Holder.__name__ = "GetGrantReferenceNumbersResponse_Holder"
            self.pyclass = Holder

    class GetGrantReferenceNumbersByDate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetGrantReferenceNumbersByDate"
        schema = "http://gotw.nerc.ac.uk/"
        def __init__(self, **kw):
            ns = ns0.GetGrantReferenceNumbersByDate_Dec.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"since"), aname="_since", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://gotw.nerc.ac.uk/","GetGrantReferenceNumbersByDate")
            kw["aname"] = "_GetGrantReferenceNumbersByDate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._since = None
                    return
            Holder.__name__ = "GetGrantReferenceNumbersByDate_Holder"
            self.pyclass = Holder

    class GetGrantReferenceNumbersByDateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetGrantReferenceNumbersByDateResponse"
        schema = "http://gotw.nerc.ac.uk/"
        def __init__(self, **kw):
            ns = ns0.GetGrantReferenceNumbersByDateResponse_Dec.schema
            TClist = [GTD("http://gotw.nerc.ac.uk/","ArrayOfString",lazy=False)(pname=(ns,"GetGrantReferenceNumbersByDateResult"), aname="_GetGrantReferenceNumbersByDateResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://gotw.nerc.ac.uk/","GetGrantReferenceNumbersByDateResponse")
            kw["aname"] = "_GetGrantReferenceNumbersByDateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetGrantReferenceNumbersByDateResult = None
                    return
            Holder.__name__ = "GetGrantReferenceNumbersByDateResponse_Holder"
            self.pyclass = Holder

    class GetDataByGrantReferenceNumber_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetDataByGrantReferenceNumber"
        schema = "http://gotw.nerc.ac.uk/"
        def __init__(self, **kw):
            ns = ns0.GetDataByGrantReferenceNumber_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"refno"), aname="_refno", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://gotw.nerc.ac.uk/","GetDataByGrantReferenceNumber")
            kw["aname"] = "_GetDataByGrantReferenceNumber"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._refno = None
                    return
            Holder.__name__ = "GetDataByGrantReferenceNumber_Holder"
            self.pyclass = Holder

    class GetDataByGrantReferenceNumberResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetDataByGrantReferenceNumberResponse"
        schema = "http://gotw.nerc.ac.uk/"
        def __init__(self, **kw):
            ns = ns0.GetDataByGrantReferenceNumberResponse_Dec.schema
            TClist = [GTD("http://gotw.nerc.ac.uk/","Project",lazy=False)(pname=(ns,"GetDataByGrantReferenceNumberResult"), aname="_GetDataByGrantReferenceNumberResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://gotw.nerc.ac.uk/","GetDataByGrantReferenceNumberResponse")
            kw["aname"] = "_GetDataByGrantReferenceNumberResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetDataByGrantReferenceNumberResult = None
                    return
            Holder.__name__ = "GetDataByGrantReferenceNumberResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://gotw.nerc.ac.uk/)
