"""
Django settings for cedainfo project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'd^g(yt46tlqs@yo8tkmb6oj^z!5g#!00bhg&2#pgxe*ag6la6k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['archman1-test.ceda.ac.uk', '127.0.0.1', '130.246.129.107']

DATETIME_FORMAT = "d-M-Y H:i"
SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'udbadmin',
    'sizefield',
    'cedainfoapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
##    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cedainfo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['/usr/local/cedainfodb/releases/current/cedainfo/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cedainfo.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'cedainfo',                      # Or path to database file if using sqlite3.
        'USER': 'cedainfo',                      # Not used with sqlite3.
        'PASSWORD': 'xxx',                  # Not used with sqlite3.
        'HOST': 'db1.ceda.ac.uk',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    },

    'userdb': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'userdb',                      # Or path to database file if using sqlite3.
        'USER': 'badc',                      # Not used with sqlite3.
        'PASSWORD': 'xxx',                  # Not used with sqlite3.
        'HOST': 'db1.ceda.ac.uk',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '5432',                      # Set to empty string for default. Not used with sqlite3.
    }

}
DATABASE_ROUTERS = ['dbrouter.DatabaseAppsRouter']
DATABASE_APPS_MAPPING= {'udbadmin': 'userdb'}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = '/usr/local/cedainfodb/releases/current/static'


# ----------------------------------------------------
# Local customisations follow
#
import re
import logging
logging.basicConfig(
level = logging.DEBUG,
    format = '%(name)s %(module)s %(levelname)s [%(asctime)s] %(message)s',
)
LOG=logging.getLogger('cedadb')

# columns for CSV parser in fsc_manager.py
fsc_manager_csv_cols = {
    'size' : 0,
    'path' : 1
}

# ckeckm files dir
CHECKM_DIR='/home/badc/checkm'

# import file for RSS exported grant information from DataMAD system
DATAMAD_RSS_FILE = '/home/badc/datamad/rss_export.xml'


# Settings used for both GWSRequest and GWS
GWS_BACKUP_CHOICES = (
    ('no backup', 'no backup'),
    ('mirror volume', 'mirror volume'),
)
GWS_REQUEST_TYPE_CHOICES = (
    ('new','new'),
    ('update','update'),
    ('remove','remove'),
)
GWS_REQUEST_STATUS_CHOICES = (
    ('ceda pending', 'ceda pending'), # initial state for new requests
    ('ceda rejected','ceda rejected'), # reviewed & rejected within CEDA
    ('ceda approved','ceda approved'), # reviewed & approved within CEDA, marks ones we want SCD to make.
    ('completed', 'completed'), # now exists or changes now applied
)
GWS_STATUS_CHOICES = (
        ('active','active'),
        ('retired', 'retired'),
)
GWS_NAME_REGEX = re.compile(r'^[a-z][0-9_a-z]*$')

GWS_PATH_CHOICES = (
    ('/group_workspaces/jasmin/', '/group_workspaces/jasmin/'),
    ('/group_workspaces/jasmin2/', '/group_workspaces/jasmin2/'),
    ('/group_workspaces/cems/','/group_workspaces/cems/'),
    ('/group_workspaces/cems2/', '/group_workspaces/cems2/'),
)

# Types of VM
VM_TYPE_CHOICES = (
    ('login','login'),
    ('transfer','transfer'),
    ('analysis','analysis'),
    ('specialist','specialist'),
    ('servicehost', 'servicehost'),
)

# Operation Types for VM
VM_OP_TYPE_CHOICES = (
    ('development', 'development'),
    ('test', 'test'),
    ('production', 'production'),
    ('research', 'research'),
)

VM_CPU_REQUIRED_CHOICES = (
    ('minimal','minimal (1)'),
    ('light','light (2)'),
    ('moderate','moderate/multiuser (4)'),
	('intermediate','intermediate (6)'),
    ('heavy','heavy/multi-threaded processing (8)'),
)

VM_MEM_REQUIRED_CHOICES = (
    ('light', 'light (1 Gb)'),
    ('moderate','moderate (2 Gb)'),
    ('multiuser','multiuser (4 Gb)'),
    ('multithreaded', 'multi-threaded processing (8 Gb)'),
    ('max','max science workload (16 Gb)'),
	('max24','max science workload (24 Gb)'),
	('max32','max science workload (32 Gb)'),
)

VM_DISK_SPACE_REQUIRED_CHOICES = (
    ('light','light (20 Gb)'),
    ('moderate','moderate (30 Gb)'),
    ('large', 'large (80 Gb)'),
    ('database', 'database (100 Gb)'),
)

VM_DISK_ACTIVITY_REQUIRED_CHOICES = (
    ('light','light'),
    ('moderate','moderate'),
    ('heavy','heavy'),
)

VM_NETWORK_ACTIVITY_REQUIRED_CHOICES = (
    ('light','light'),
    ('moderate','moderate'),
    ('heavy','heavy'),
)

VM_OS_REQUIRED_CHOICES = (
    ('rhel7','rhel7'),
    ('rhel6','rhel6'),
    ('rhel5','rhel5'),
    ('sles11','sles11'),
)

VM_REQUEST_STATUS_CHOICES = (
    ('ceda pending', 'ceda pending'), # initial state for new requests
    ('ceda rejected','ceda rejected'), # reviewed & rejected within CEDA
    ('ceda approved','ceda approved'), # reviewed & approved within CEDA, marks ones we want SCD to make.
    ('completed', 'completed'),
)

VM_REQUEST_TYPE_CHOICES = (
    ('new','new'),
    ('update','update'),
    ('remove','remove'),
)
VM_STATUS_CHOICES = (
    ('active','active'),
    ('retired', 'retired'),
)

VM_TENANCY_CHOICES = (
    ('aaa','aaa'),
    ('bbb', 'bbb'),
)



MOUNT_CHOICES = (
    ('no panasas mounts', 'no panasas mounts'),
    ('/datacentre/archvol ro', '/datacentre/archvol ro : Archive filesystem access'),
    ('/datacentre/archvol rw', '/datacentre/archvol rw : Archive write access CEDA internal ingest machines only'),
    ('/group_workspaces/jasmin rw','/group_workspaces/jasmin rw : JASMIN Group Workspaces'),
    ('/group_workspaces/cems rw','/group_workspaces/cems rw : CEMS Group Workspaces'),
    ('/home/users rw','/home/users rw : User home areas'),
    ('/datacentre/processing rw','/datacentre/processing rw : CEDA internal ingest machines only'),
    ('/datacentre/arrivals ro','/datacentre/arrivals ro : CEDA internal ingest machines only'),
    ('/datacentre/requests rw','/datacentre/requests rw : User Requests area'),
    ('/datacentre/stats rw', '/datacentre/stats rw : CEDA internal management machines only'),
    ('/datacentre/opshome', '/datacentre/opshome rw : CEDA internal management machines only'),
    #('/datacentre/backupcache rw','/datacentre/backupcache rw : CEDA internal backup systems only'),    
)

ADMIN_USERS_PATCH_RESPONSIBLE = [
    3,  # Brian
    6,  # Andrew
    8,  # Peter
    35, # Jonathan
    36, # Cristina
]
#
# Url for LDAP server
#
LDAP_URL       = 'ldap://homer.esc.rl.ac.uk'
#
# Details for writable LDAP server
#
##LDAP_WRITE_URL    = 'ldap://ldap03.esc.rl.ac.uk'
##LDAP_WRITE_PASSWD = 'THUtu7Re'
##LDAP_WRITE_DN     = 'cn=cedaadmin,ou=jasmin,ou=People,o=hpc,dc=rl,dc=ac,dc=uk'

LDAP_WRITE_URL    = "ldap://homer.esc.rl.ac.uk"
LDAP_WRITE_PASSWD = 'xxx'
LDAP_WRITE_DN     = 'cn=cedaadmin,ou=software,ou=People,o=hpc,dc=rl,dc=ac,dc=uk'

ADDITIONAL_LDAP_GROUP_FILE = "/usr/local/cedainfodb/additional_ldap_files/ldap_additional_groups.txt"
ADDITIONAL_LDAP_USER_FILE  = "/usr/local/cedainfodb/additional_ldap_files/ldap_additional_users.txt"

SIZEFIELD_IS_BINARY = False
SIZEFIELD_AMBIGUOUS_SUFFIX = False
SIZEFIELD_ASSUME_BINARY = False

PROJECT_DIR = BASE_DIR
