# Django settings for cedainfo project.

import os
import re
PROJECT_DIR= os.path.dirname(__file__) 

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)

MANAGERS = ADMINS

LOGIN_REDIRECT_URL = "/admin"

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'cedainfo',                      # Or path to database file if using sqlite3.
        'USER': 'cedainfo',                      # Not used with sqlite3.
        'PASSWORD': 'ler239b',                  # Not used with sqlite3.
        'HOST': 'bora.badc.rl.ac.uk',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    },

    'userdb': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'userdb',                      # Or path to database file if using sqlite3.
        'USER': 'badc',                      # Not used with sqlite3.
        'PASSWORD': 'rtp569w',                  # Not used with sqlite3.
        'HOST': 'bora.badc.rl.ac.uk',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }

}
DATABASE_ROUTERS = ['dbrouter.DatabaseAppsRouter']
DATABASE_APPS_MAPPING= {'udbadmin': 'userdb'}
#DATABASE_ENGINE = 'postgresql_psycopg2'           # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
#DATABASE_ENGINE = 'sqlite3'           # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
#DATABASE_NAME = 'cedainfo_dev'             # Or path to database file if using sqlite3.
#DATABASE_NAME = 'sqlite3.db'             # Or path to database file if using sqlite3.
#DATABASE_USER = 'cedainfo'             # Not used with sqlite3.
#DATABASE_PASSWORD = 'ler239b'         # Not used with sqlite3.
#DATABASE_HOST = 'bora.badc.rl.ac.uk'             # Set to empty string for localhost. Not used with sqlite3.
#DATABASE_PORT = ''             # Set to empty string for default. Not used with sqlite3.

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = '' # os.path.join(PROJECT_DIR,"cedainfoapp","templates","static")

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = '/media'


# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = ''

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(PROJECT_DIR,"cedainfoapp","templates","static"),
    os.path.join(PROJECT_DIR,"dmp","static"),
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)


# Make this unique, and don't share it with anybody.
SECRET_KEY = ')p*zn!&dkeiji481rutxe%av0_oa*4kc(57_rkda8!c&o7w$#^'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',    
)

ROOT_URLCONF = 'cedainfo.urls'


TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(PROJECT_DIR, "templates"),
    os.path.join(PROJECT_DIR,"cedainfoapp","templates"),
    os.path.join(PROJECT_DIR,"dmp","templates","dmp"),
    os.path.join(PROJECT_DIR,"proginfo","templates"),
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django_extensions',
    'sizefield',
    'cedainfo.cedainfoapp',
    'cedainfo.proginfo',
    'cedainfo.udbadmin',
    'cedainfo.dmp',
)

# ----------------------------------------------------
# Local customisations follow
#
import logging
logging.basicConfig(
level = logging.DEBUG,
    format = '%(name)s %(module)s %(levelname)s [%(asctime)s] %(message)s',
)
LOG=logging.getLogger('cedadb')

# columns for CSV parser in fsc_manager.py
fsc_manager_csv_cols = {
    'size' : 0,
    'path' : 1
}

# ckeckm files dir
CHECKM_DIR='/home/badc/checkm'

# Settings used for both GWSRequest and GWS
GWS_BACKUP_CHOICES = (
    ('no backup', 'no backup'),
    ('mirror volume', 'mirror volume'),
)
GWS_REQUEST_TYPE_CHOICES = (
    ('new','new'),
    ('update','update'),
    ('remove','remove'),
)
GWS_REQUEST_STATUS_CHOICES = (
    ('ceda pending', 'ceda pending'), # initial state for new requests
    ('ceda rejected','ceda rejected'), # reviewed & rejected within CEDA
    ('ceda approved','ceda approved'), # reviewed & approved within CEDA, marks ones we want SCD to make.
    ('completed', 'completed'), # now exists or changes now applied
)
GWS_STATUS_CHOICES = (
        ('active','active'),
        ('retired', 'retired'),
)
GWS_NAME_REGEX = re.compile(r'^[a-z][0-9_a-z]*$')

GWS_PATH_CHOICES = (
    ('/group_workspaces/jasmin/', '/group_workspaces/jasmin/'),
    ('/group_workspaces/cems/','/group_workspaces/cems/'),
)

# Types of VM
VM_TYPE_CHOICES = (
    ('login','login'),
    ('transfer','transfer'),
    ('analysis','analysis'),
    ('specialist','specialist'),
    ('servicehost', 'servicehost'),
)

# Operation Types for VM
VM_OP_TYPE_CHOICES = (
    ('development', 'development'),
    ('test', 'test'),
    ('production', 'production'),
    ('research', 'research'),
)

VM_CPU_REQUIRED_CHOICES = (
    ('minimal','minimal (1)'),
    ('light','light (2)'),
    ('moderate','moderate/multiuser (4)'),
    ('heavy','heavy/multi-threaded processing (8)'),
)

VM_MEM_REQUIRED_CHOICES = (
    ('light', 'light (1 Gb)'),
    ('moderate','moderate (2 Gb)'),
    ('multiuser','multiuser (4 Gb)'),
    ('multithreaded', 'multi-threaded processing (8 Gb)'),
    ('max','max science workload (16 Gb)'),
)

VM_DISK_SPACE_REQUIRED_CHOICES = (
    ('light','light (10 Gb)'),
    ('moderate','moderate (30 Gb)'),
    ('large', 'large (80 Gb)'),
    ('database', 'database (100 Gb)'),
)

VM_DISK_ACTIVITY_REQUIRED_CHOICES = (
    ('light','light'),
    ('moderate','moderate'),
    ('heavy','heavy'),
)

VM_NETWORK_ACTIVITY_REQUIRED_CHOICES = (
    ('light','light'),
    ('moderate','moderate'),
    ('heavy','heavy'),
)

VM_OS_REQUIRED_CHOICES = (
    ('rhel6','rhel6'),
    ('rhel5','rhel5'),
    ('sles11','sles11'),
)

VM_REQUEST_STATUS_CHOICES = (
    ('ceda pending', 'ceda pending'), # initial state for new requests
    ('ceda rejected','ceda rejected'), # reviewed & rejected within CEDA
    ('ceda approved','ceda approved'), # reviewed & approved within CEDA, marks ones we want SCD to make.
    ('completed', 'completed'),
)

VM_REQUEST_TYPE_CHOICES = (
    ('new','new'),
    ('update','update'),
    ('remove','remove'),
)
VM_STATUS_CHOICES = (
    ('created','created'),
    ('inuse', 'inuse'),
    ('deprecated', 'deprecated'),
    ('retired', 'retired'),
)
MOUNT_CHOICES = (
    ('no panasas mounts', 'no panasas mounts'),
    ('/datacentre/archvol ro', '/datacentre/archvol ro : Archive filesystem access'),
    ('/datacentre/archvol rw', '/datacentre/archvol rw : Archive write access CEDA internal ingest machines only'),
    ('/group_workspaces/jasmin rw','/group_workspaces/jasmin rw : JASMIN Group Workspaces'),
    ('/group_workspaces/cems rw','/group_workspaces/cems rw : CEMS Group Workspaces'),
    ('/home/users rw','/home/users rw : User home areas'),
    ('/datacentre/processing rw','/datacentre/processing rw : CEDA internal ingest machines only'),
    ('/datacentre/arrivals ro','/datacentre/arrivals ro : CEDA internal ingest machines only'),
    ('/datacentre/requests rw','/datacentre/requests rw : User Requests area'),
    ('/datacentre/stats rw', '/datacentre/stats rw : CEDA internal management machines only'),
    ('/datacentre/opshome', '/datacentre/opshome rw : CEDA internal management machines only'),
    #('/datacentre/backupcache rw','/datacentre/backupcache rw : CEDA internal backup systems only'),    
)

ADMIN_USERS_PATCH_RESPONSIBLE = [
    3,  # Brian
    6,  # Andrew
    8,  # Peter
    35, # Jonathan
    36, # Cristina
]

#
# Url for LDAP server
#
LDAP_URL       = 'ldap://homer.esc.rl.ac.uk'
#
# Url of writable LDAP server (test server at present)
#
LDAP_WRITE_URL = "ldap://ldap03.esc.rl.ac.uk"
