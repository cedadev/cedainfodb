#!/home/badc/software/infrastructure/cedainfo_releases/venv/bin/python
#
# Checks if any updates are required to the group LDAP information. If so it
# sends the updates to the LDAP server. Sends a notification email and writes
# any updates to a log file. Intended to be called as a cron job.
#
import subprocess
import sys
import os
import tempfile
import psycopg2
import smtplib
import time


from django.core.management import setup_environ

sys.path.append('/home/badc/software/infrastructure/cedainfo_releases/current/cedainfo')

import cron_settings as dbsettings
setup_environ(dbsettings)

import udbadmin.LDAP as LDAP
import udbadmin.update_check as update_check
import udbadmin.udb_ldap as udb_ldap

from django.db import connections

LOG_DIR = '/datacentre/stats/ldap_accounts/'
RUN_LOG = LOG_DIR + 'group_update_run.log'

NAME_PREFIX = 'ceda_cron_check2' 


def mail_info_msg (cmds, output):

    print 'Sending message'

    server = smtplib.SMTP('localhost')
    messageFrom = "ldapupdate <badc@stfc.ac.uk>"
    messageTo   = "andrew.harwood@stfc.ac.uk"

    msg = """From: %s
To: %s
Subject: LDAP server updated

The following commands have been run on the LDAP server:

%s 

Output:

%s

This message generated by %s

"""  % (messageFrom, messageTo, cmds, output, sys.argv[0])
        
    server.sendmail(messageFrom, messageTo, msg)
    server.quit()



dbconf     = dbsettings.DATABASES['userdb']
connection = psycopg2.connect(dbname=dbconf['NAME'], 
                                host=dbconf['HOST'],
                                user=dbconf['USER'], 
                                password=dbconf['PASSWORD'])

runlog = open(RUN_LOG, 'a')
os.environ['TZ'] = 'GB'
time_string = time.strftime('%Y%m%d_%H%M', time.localtime(time.time()))
runlog.write('Running at: ' + time_string + '\n')
runlog.close()


group_updated = update_check.group_updated(connection, reset=True, name=NAME_PREFIX + '_group')
print 'Group updated: ', group_updated


skip_check = False

if group_updated or skip_check:
    print 'Generating ldif commands'
    cmds = udb_ldap.ldif_all_group_updates()
        
    if cmds:
        
        out = LDAP.ldif_write(cmds)
        output = "".join(out)

        outlog = open(LOG_DIR + time_string + '.log', 'w')
        outlog.write(cmds +"\n")
        outlog.write('\nOutput:\n')
        outlog.write(output + '\n')
        outlog.close()
        
        mail_info_msg (cmds, output)
