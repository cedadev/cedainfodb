#!/usr/bin/python
#
# Cron script to check and update the external NIS group file
# based on the contents of the userdb.
#
# 
import os
import sys
import shutil
import subprocess
import tempfile

MIN_SIZE     = 6000    #Minimum group file size, in bytes
MAX_PER_SIZE_DIFF = 40.0
SWROOT       = "/etc/yp-excedar/scripts"
FILESTORE    = SWROOT + "/files"
FIXED_GROUPS = "/etc/yp-excedar/group.internal"
GROUP_FILE   = "/etc/yp-excedar/group"

group_file = FILESTORE + '/' + 'udbgroup.' + \
            os.popen("date +'%Y%m%d_%H%M'").readline().rstrip('\n')
tmp_file   = tempfile.NamedTemporaryFile()

#
# Download group file lines from userdb. Exit if there is a
# problem with the download.
#            
cmd = "%s/download_group_file > %s" % (SWROOT, tmp_file.name)
print "Executing: %s" % cmd
status = subprocess.call(cmd, shell=True)
print 'Status: ', status

if status != 0:
   sys.exit(1)

cmd = "cat %s %s > %s" % (FIXED_GROUPS, tmp_file.name, group_file)
print "Executing: %s" % cmd
os.system(cmd)

#
# Sanity check that new group file exists
#
if not os.path.isfile(group_file):
    sys.exit(2)
#
# Do sanity check on size of new group file and the difference between old 
# and new group files. Exit if the difference is large as this may mean 
# something has gone wrong.
#
new_size = os.path.getsize(group_file)

if new_size < MIN_SIZE:
    print 'New group file is too small! (%s bytes, min limit is %s bytes)' % \
          (new_size, MIN_SIZE) 
    sys.exit(2)

if not os.path.isfile(GROUP_FILE):
    print 'Group file %s not found' % GROUP_FILE
    sys.exit(2)

old_size = os.path.getsize(GROUP_FILE)
   
print 'New size: ', new_size
print 'Old size: ', old_size
per_diff = (100.0 * abs(new_size - old_size))/old_size
print 'Per diff: ', per_diff

if per_diff > MAX_PER_SIZE_DIFF:
    print 'Abandoning update as size of files  %s and %s differs by %s percent.' % (group_file, GROUP_FILE, per_diff)
    sys.exit(2)
#
# Sort the live group file and the one generated from the userdb
# and check if they are different
#
a = tempfile.NamedTemporaryFile()
cmd = "sort %s > %s" % (GROUP_FILE, a.name) 
print "Executing: %s" % cmd
os.system(cmd)

b = tempfile.NamedTemporaryFile()
cmd = "sort %s > %s" % (group_file, b.name) 
print "Executing: %s" % cmd
os.system(cmd)

status = subprocess.call(["diff", "--brief", a.name, b.name])

if status:
   print 'Files differ'
   print 'Copying %s to %s' % (group_file, GROUP_FILE)
   shutil.copy2(group_file, GROUP_FILE)
   print 'Updating NIS files'
   os.system("/csupport/script/nis_update")
   os.system ("svn -m '' commit %s" % GROUP_FILE)
else:
   print 'Files do not differ. Removing %s' % group_file
   os.remove(group_file) 

