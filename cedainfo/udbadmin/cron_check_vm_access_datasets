#!/usr/local/cedainfodb/venv/bin/python
#
# Search for users who have 'vm_access' datasets, but no cems/jasmin
# vm account. Optionally remove these datasets if called with the 
# '--remove' flag.
#

import sys
import os
import time

from django.core.management import setup_environ

sys.path.append('/usr/local/cedainfodb/releases/current/cedainfo')
LOG_DIR = '/datacentre/opshome/backups/ldap_accounts/updates/'
RUN_LOG = LOG_DIR + 'remove_vm_access.log'

import cron_settings as dbsettings
setup_environ(dbsettings)

from udbadmin.models import *


remove_datasets = False

if len(sys.argv) > 1:
 if sys.argv[1] == "--remove":
     remove_datasets = True


runlog = open(RUN_LOG, 'a')
os.environ['TZ'] = 'GB'
time_string = time.strftime('%Y%m%d_%H%M', time.localtime(time.time()))
runlog.write('Running at: ' + time_string + '\n')

recs = Datasetjoin.objects.filter(datasetid__datasetid__startswith='vm_access').filter(removed=0)
recs = recs.filter(datasetid__grp__startswith='cluster')
recs = recs.exclude(datasetid__datasetid='vm_access_ceda_internal')
recs = recs.filter(userkey__gt=0).order_by('userkey')    

for rec in recs:

    if (not rec.userkey.isJasminCemsUser()) and (not rec.userkey.isSystemUser()) :

        infoString = "Userkey: %s Accountid: %s Datasetid: %s" % \
               (rec.userkey, rec.userkey.accountid, rec.datasetid.datasetid)

        if remove_datasets:
            runlog.write('   Removed ' + infoString + '\n')
            rec.removeDataset()
        else:
            print infoString
   
runlog.close()
