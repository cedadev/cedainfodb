#!/usr/local/cedainfodb/releases/current/venv/bin/python
#
# Checks if any updates are required to the LDAP server for groups. If so it
# sends the updates to the LDAP server. Sends a notification email and writes
# any updates to a log file. Intended to be called as a cron job. Only to be used
# once the Jasmin Accounts Portal is in operation.
#
# If --update-anyway option is set then the script will do a full check
# for any updates required. If the option is not set then it will use
# a quick test of the userdb to see if an update is likely before doing
# the full check.
#
import subprocess
import sys
import tempfile
import psycopg2
import smtplib
import time

import os
import django

sys.path.append('/usr/local/cedainfodb/releases/current/cedainfo')
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "cedainfo.settings")
django.setup()

import udbadmin.LDAP as LDAP
import udbadmin.update_check as update_check
import udbadmin.udb_ldap as udb_ldap

from django.db import connections
from django.conf import settings

LOG_DIR = '/var/log/ldap/'
RUN_LOG = LOG_DIR + 'update_run.log'

NAME_PREFIX = 'ceda_jap_check' 


def mail_info_msg (cmds, output, subject='', group_updated='', update_anyway=''):

    print 'Sending message'

    server = smtplib.SMTP('localhost')
    messageFrom = "ldapupdate <badc@stfc.ac.uk>"
    messageTo   = "andrew.harwood@stfc.ac.uk"

    msg = """From: %s
To: %s
Subject: LDAP-jap %s server updated

The following commands have been run on the LDAP server:

%s 

Output:

%s


Group updated: %s
Update anyway: %s

This message generated by %s

"""  % (messageFrom, messageTo, subject, cmds, output, group_updated, update_anyway, sys.argv[0])
        
    server.sendmail(messageFrom, messageTo, msg)
    server.quit()

def mail_error ():
    server = smtplib.SMTP('localhost')
    messageFrom = "ldapupdate <badc@stfc.ac.uk>"
    messageTo   = "andrew.harwood@stfc.ac.uk"
    subject = "Error updating LDAP-jap"
    
    msg = """From: %s
To: %s
Subject: %s

An error occured when running the script to update the LDAP server from the userdb.

This message generated by %s

"""  % (messageFrom, messageTo, subject, sys.argv[0])
        
    server.sendmail(messageFrom, messageTo, msg)
    server.quit()    
    		
try:
    update_anyway = False

    if len(sys.argv) > 1:
     if sys.argv[1] == "--update-anyway":
	 update_anyway = True

    runlog = open(RUN_LOG, 'a')

    dbconf     = settings.DATABASES['userdb']
    connection = psycopg2.connect(dbname=dbconf['NAME'], 
                                    host=dbconf['HOST'],
                                    user=dbconf['USER'], 
                                    password=dbconf['PASSWORD'])

    os.environ['TZ'] = 'GB'
    time_string = time.strftime('%Y%m%d_%H%M', time.localtime(time.time()))
    runlog.write('Running at: ' + time_string + '\n')
    runlog.close()


    group_updated = update_check.group_updated(connection, reset=True, name=NAME_PREFIX + '_group')
    
    print 'Group updated: ', group_updated

    if group_updated or update_anyway:

	print 'Generating ldif group commands'
	cmds = udb_ldap.ldif_all_group_updates(select_groups=udb_ldap.userdb_managed_ldap_groups(), add_additions_file=False)

	if cmds:
            print 'cmds: ', cmds
            out = ''
            out = LDAP.ldif_write(cmds)
            output = "".join(out)

            outlog = open(LOG_DIR + time_string + '_group.log', 'w')
            outlog.write(cmds +"\n")
            outlog.write('\nOutput:\n')
            outlog.write(output + '\n')
            outlog.close()

            mail_info_msg (cmds, output, subject='group', \
	                   group_updated=group_updated, update_anyway=update_anyway)
except:
#    raise
    mail_error()    
