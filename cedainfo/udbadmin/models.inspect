# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#     * Rearrange models' order
#     * Make sure each model has one field with primary_key=True
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.

from django.db import models

class AccountTypes(models.Model):
    title = models.CharField(max_length=20)
    class Meta:
        db_table = u'account_types'

class Addresses(models.Model):
    addresskey = models.IntegerField(primary_key=True)
    institutekey = models.IntegerField()
    department = models.CharField(max_length=100)
    address1 = models.CharField(max_length=150)
    address2 = models.CharField(max_length=100)
    address3 = models.CharField(max_length=100)
    address4 = models.CharField(max_length=100)
    address5 = models.CharField(max_length=100)
    nerc = models.IntegerField()
    class Meta:
        db_table = u'addresses'

class Badcteam(models.Model):
    name = models.CharField(max_length=50)
    class Meta:
        db_table = u'badcteam'

class Countries(models.Model):
    name = models.CharField(max_length=80)
    area = models.CharField(max_length=80)
    isocode = models.CharField(max_length=8)
    class Meta:
        db_table = u'countries'

class Datasetexpirenotification(models.Model):
    userkey = models.IntegerField()
    datasetid = models.CharField(max_length=40)
    ver = models.IntegerField()
    date = models.DateTimeField()
    emailaddress = models.CharField(max_length=50)
    extrainfo = models.CharField(max_length=1500)
    class Meta:
        db_table = u'datasetexpirenotification'

class Datasetrequest(models.Model):
    id = models.IntegerField(primary_key=True)
    userkey = models.IntegerField()
    datasetid = models.CharField(max_length=40)
    requestdate = models.DateTimeField()
    research = models.CharField(max_length=1500)
    nercfunded = models.IntegerField()
    fundingtype = models.CharField(max_length=40)
    grantref = models.CharField(max_length=40)
    openpub = models.TextField() # This field type is a guess.
    extrainfo = models.CharField(max_length=1000)
    fromhost = models.CharField(max_length=80)
    status = models.CharField(max_length=12)
    class Meta:
        db_table = u'datasetrequest'

class Degrees(models.Model):
    degree = models.CharField(max_length=20)
    class Meta:
        db_table = u'degrees'

class Fundingtypes(models.Model):
    ordering = models.IntegerField()
    name = models.CharField(max_length=50)
    class Meta:
        db_table = u'fundingtypes'

class Institutetypes(models.Model):
    type = models.CharField(max_length=30)
    class Meta:
        db_table = u'institutetypes'

class Openid(models.Model):
    data_center = models.CharField(max_length=50, primary_key=True)
    domain_name_component = models.CharField(max_length=150)
    class Meta:
        db_table = u'openid'

class Privilege(models.Model):
    userkey = models.IntegerField()
    type = models.CharField(max_length=25)
    datasetid = models.CharField(max_length=40)
    comment = models.CharField(max_length=200)
    class Meta:
        db_table = u'privilege'

class PrivilegeTypes(models.Model):
    privilege = models.CharField(max_length=40)
    class Meta:
        db_table = u'privilege_types'

class Subjects(models.Model):
    subject = models.CharField(max_length=100)
    class Meta:
        db_table = u'subjects'

class Tbdatasetjoin(models.Model):
    userkey = models.IntegerField()
    datasetid = models.CharField(max_length=40)
    ver = models.IntegerField()
    endorsedby = models.CharField(max_length=50)
    endorseddate = models.DateTimeField()
    research = models.CharField(max_length=1500)
    nercfunded = models.IntegerField()
    removed = models.IntegerField()
    removeddate = models.DateTimeField()
    fundingtype = models.CharField(max_length=40)
    grantref = models.CharField(max_length=40)
    openpub = models.TextField() # This field type is a guess.
    extrainfo = models.CharField(max_length=3000)
    expiredate = models.DateTimeField()
    class Meta:
        db_table = u'tbdatasetjoin'

class Tbdatasets(models.Model):
    datasetid = models.CharField(max_length=40)
    authtype = models.CharField(max_length=20)
    grp = models.CharField(max_length=40)
    grouptype = models.CharField(max_length=20)
    description = models.CharField(max_length=100)
    source = models.CharField(max_length=50)
    ukmoform = models.IntegerField()
    ordr = models.IntegerField()
    comments = models.CharField(max_length=200)
    directory = models.CharField(max_length=100)
    metdata = models.IntegerField()
    conditions = models.CharField(max_length=100)
    defaultreglength = models.IntegerField()
    datacentre = models.CharField(max_length=20)
    infourl = models.CharField(max_length=200)
    class Meta:
        db_table = u'tbdatasets'

class Tbinstitutes(models.Model):
    institutekey = models.IntegerField()
    name = models.CharField(max_length=80)
    country = models.CharField(max_length=30)
    type = models.CharField(max_length=30)
    link = models.CharField(max_length=100)
    class Meta:
        db_table = u'tbinstitutes'

class Tbusers(models.Model):
    userkey = models.IntegerField()
    title = models.CharField(max_length=10)
    surname = models.CharField(max_length=50)
    othernames = models.CharField(max_length=50)
    addresskey = models.IntegerField()
    telephoneno = models.CharField(max_length=50)
    faxno = models.CharField(max_length=50)
    emailaddress = models.CharField(max_length=50)
    comments = models.CharField(max_length=1000)
    endorsedby = models.CharField(max_length=50)
    degree = models.CharField(max_length=20)
    field = models.CharField(max_length=50)
    accountid = models.CharField(max_length=20)
    accounttype = models.CharField(max_length=10)
    webpasswd = models.TextField() # This field type is a guess.
    encpasswd = models.TextField() # This field type is a guess.
    md5passwd = models.TextField() # This field type is a guess.
    startdate = models.DateTimeField()
    onlinereg = models.IntegerField()
    webpage = models.CharField(max_length=100)
    sharedetails = models.IntegerField()
    datacenter = models.CharField(max_length=30)
    openid_username_component = models.CharField(max_length=100)
    openid = models.CharField(max_length=100)
    class Meta:
        db_table = u'tbusers'

class Titles(models.Model):
    title = models.CharField(max_length=20)
    class Meta:
        db_table = u'titles'

class DjangoSession(models.Model):
    session_key = models.CharField(max_length=40, primary_key=True)
    session_data = models.TextField()
    expire_date = models.DateTimeField()
    class Meta:
        db_table = u'django_session'

class DjangoAdminLog(models.Model):
    id = models.IntegerField(primary_key=True)
    action_time = models.DateTimeField()
    user_id = models.IntegerField()
    content_type = models.ForeignKey(DjangoContentType)
    object_id = models.TextField()
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    class Meta:
        db_table = u'django_admin_log'

class DjangoContentType(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)
    class Meta:
        db_table = u'django_content_type'

class AuthGroupPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    group = models.ForeignKey(AuthGroup)
    permission = models.ForeignKey(AuthPermission)
    class Meta:
        db_table = u'auth_group_permissions'

class AuthPermission(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=50)
    content_type = models.ForeignKey(DjangoContentType)
    codename = models.CharField(max_length=100)
    class Meta:
        db_table = u'auth_permission'

class AuthGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=80)
    class Meta:
        db_table = u'auth_group'

class AuthUserUserPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    permission = models.ForeignKey(AuthPermission)
    class Meta:
        db_table = u'auth_user_user_permissions'

class AuthUserGroups(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    group = models.ForeignKey(AuthGroup)
    class Meta:
        db_table = u'auth_user_groups'

class AuthMessage(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    message = models.TextField()
    class Meta:
        db_table = u'auth_message'

class AuthUser(models.Model):
    id = models.IntegerField(primary_key=True)
    username = models.CharField(unique=True, max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=75)
    password = models.CharField(max_length=128)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    is_superuser = models.BooleanField()
    last_login = models.DateTimeField()
    date_joined = models.DateTimeField()
    class Meta:
        db_table = u'auth_user'

